name: Build and Push Docker Images

on:
  pull_request:
    types: [ closed ]
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push-nextjs:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: dukeofjava/freetoolsy-client
      VERSION: 0.1-BETA

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # List files for Debugging
      - name: List Files in Frontend
        run: ls -la frontend/

      # Enable Docker BuildKit
      - name: Set up Docker BuildKit
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: "${{ runner.os }}-buildx-${{ env.IMAGE_NAME }}-${{ hashFiles('frontend/Dockerfile') }}"
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.IMAGE_NAME }}-

      # Build Docker Image with BuildKit caching
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: frontend/.
          file: frontend/Dockerfile
          tags: "${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            NEXT_PUBLIC_BACKEND_API_VERSION=${{ secrets.BACKEND_API_VERSION }}
            NEXT_PUBLIC_BACKEND_BASE_URL=${{ secrets.BACKEND_BASE_URL }}
            NEXT_PUBLIC_BACKEND_BASE_URL_PRODUCTION=${{ secrets.BACKEND_BASE_URL_PRODUCTION }}

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push Docker Image
      - name: Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: frontend/.
          file: frontend/Dockerfile
          tags: ${{ env.IMAGE_NAME }}:${{ env.VERSION }},${{ env.IMAGE_NAME }}:latest
          push: true
          # Leverage existing cache from previous steps
          cache-from: type=local,src=/tmp/.buildx-cache

  build-and-push-backend:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: dukeofjava/freetoolsy-server

    # Run PostgreSQL in the background
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # List files for Debugging
      - name: List Files in Backend
        run: ls -la backend/

      # Set up JDK
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: backend/freetoolsy-server/.m2
          key: "${{ runner.os }}-maven-${{ hashFiles('backend/freetoolsy-server/pom.xml') }}"
          restore-keys: |
            ${{ runner.os }}-maven-

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker Image with Jib and registry cache
      - name: Build Backend Docker Image
        working-directory: backend/freetoolsy-server
        env:
          DATABASE_HOST: 127.0.0.1
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          TAG="${IMAGE_NAME}:${VERSION}"
          TAG_LATEST="${IMAGE_NAME}:latest"
          echo "Building and pushing Docker image: $TAG and $TAG_LATEST"
          mvn compile jib:build -X \
            -Dimage=$TAG \
            -Djib.to.tags=${VERSION},latest \
            -Djib.useOnlyProjectCache=true \
            -Djib.allowInsecureRegistries=false