name: Semantic Release

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Configure Git remote with token
        run: git remote set-url origin https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git

      - name: Get current branch
        id: branch
        run: echo "current_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      # Determine if this should be a beta release based on a flag in the commit message
      - name: Check for beta flag
        id: check_beta
        run: |
          BETA_FLAG=$(git log -1 --pretty=%B | grep -c '\[beta\]' || true)
          if [[ "${{ steps.branch.outputs.current_branch }}" == "develop" && "$BETA_FLAG" -gt 0 ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
          fi

      # Only run for develop branch when beta flag is detected or for main branch always
      - name: Run Semantic Release
        id: semantic
        if: steps.branch.outputs.current_branch == 'main' || steps.check_beta.outputs.is_beta == 'true'
        run: |
          if [[ "${{ steps.branch.outputs.current_branch }}" == "develop" && "${{ steps.check_beta.outputs.is_beta }}" == "true" ]]; then
            npx semantic-release --branches develop --prerelease BETA
          else
            npx semantic-release --branches main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Update versions in package.json and pom.xml files
      - name: Update version in frontend package.json
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION="${{ steps.semantic.outputs.new_release_version }}"
          cd frontend
          npm version $VERSION --no-git-tag-version

      - name: Update version in backend pom.xml
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION="${{ steps.semantic.outputs.new_release_version }}"
          cd backend/freetoolsy-server
          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

      # Commit the updated version files
      - name: Commit updated version files
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add frontend/package.json backend/freetoolsy-server/pom.xml
          git commit -m "chore(release): update version files to ${{ steps.semantic.outputs.new_release_version }} [skip ci]"
          git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git HEAD:${{ steps.branch.outputs.current_branch }}

  # Trigger build-push workflow only when a new release is published on main branch
  trigger-build-push:
    needs: release
    if: needs.release.outputs.new_release_published == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger build-push workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          event-type: new-release
          client-payload: '{"version": "${{ needs.release.outputs.new_release_version }}"}'